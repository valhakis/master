#!/usr/bin/env node
var os = require('os');

require('../globals');

var express = require('express');

var example = {
  'client-watch': [

  ],
  'server-watch': [
    App.root('dev')
  ]
};

/*
var sample = express();
sample.listen(80, function() {
  console.log('listening at 80');
});
*/

var app = express();

var watch = require('node-watch');
var config = App.require('config');
var spawn = require('child_process').spawn;
var bs = require("browser-sync").create();

var server = {
  lastCode: 0,
  spawn: null,
  start: function() {
    if (os.platform() == 'win32') {
      this.spawn = spawn('node', ['index.js'], {
        stdio: 'inherit',
        cwd: App.root('server')
      });
    } else {
      this.spawn = spawn('/usr/bin/env', ['node', '.'], {
        stdio: 'inherit',
        cwd: App.root('server')
      });
    }
    this.spawn.on('close', (code, signal) => {
      console.log(`server closed: ${code}`);
    });
  },
  forceStart: function() {
  },
  restart: function() {
    if (this.spawn && this.spawn.kill) {
      this.spawn.kill();
    }
    delete this.spawn;
    this.start();
  },
  close: function() {
    this.spawn.kill();
    this.spawn = null;
  }
};

App.require('dev')(server, bs);

server.start();

watch(example['server-watch'], { recursive: true}, function() {
  server.restart();
});

app.get('/', function(req, res) {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title>[app]</title>
    </head>
    <body>

    <p>[app]</p>

    </body>
    </html>
  `);
});

app.get('/restart', function(req, res) {
  console.log('HAVE TO RESTART');
  server.restart();
  res.send('');
});

bs.init({
  port: config['bs-port'],
  host: config['bs-host'],
  proxy: `http://${config.host}:${config.port}`,
  open: false
});

App.masterRequire('notes/app')(server, bs);
App.masterRequire('svg/app')(server, bs);
App.masterRequire('canvas/app')(server, bs);
App.masterRequire('site/app')(server, bs);
App.masterRequire('problem/app')(server, bs);
App.masterRequire('terminal/app')(server, bs);
App.masterRequire('api/app')(server, bs);
App.masterRequire('todo/app')(server, bs);
App.masterRequire('example/app')(server, bs);
App.masterRequire('learnopengl/app')(server, bs);
App.masterRequire('node/app')(server, bs);
App.masterRequire('template_engines/app')(server, bs);
App.masterRequire('highlighters/app')(server, bs);

watch(App.root('server'), { recursive: true}, function() {
  server.restart();
});

watch([
  App.root('public'),
  App.root('views')
], { recursive: true}, function() {
  bs.reload();
});


app.listen(config['app-port'], config['app-host'], function() {
  console.log(`APP IS AT ${config['app-host']}:${config['app-port']}.`);
});

process.stdin.resume();

var exitHandler = function(options, err) {
  if (options.cleanup) {
    console.log('I HAVE TO CLEAN UP');
    server.close();
  }

  if (err) {
    console.log(err.stack);
  }

  if (options.exit) {
    console.log('I HAVE TO EXIT');
    process.exit();
  }

};

process.on('exit', exitHandler.bind(null, {cleanup: true}));
process.on('SIGINT', exitHandler.bind(null, {exit: true}));
process.on('uncaughtException', exitHandler.bind(null, {exit: true}));
